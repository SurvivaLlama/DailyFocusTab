/* Anime-inspired styles and animations */
@keyframes float {
    0% { transform: translateY(0px) rotate(-2deg); }
    50% { transform: translateY(-20px) rotate(2deg); }
    100% { transform: translateY(0px) rotate(-2deg); }
}

@keyframes glow {
    0% { box-shadow: 0 0 5px rgba(255,105,180,0.5); }
    50% { box-shadow: 0 0 20px rgba(255,105,180,0.8); }
    100% { box-shadow: 0 0 5px rgba(255,105,180,0.5); }
}

/* Base styles to ensure the focus container is centered */
body {
    height: 100vh;
    width: 100vw;
    margin: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background: linear-gradient(135deg, #fafafa 0%, #f7b731 100%);
    transition: all 0.3s;
    overflow: hidden;
}

body.dark-mode {
    background: linear-gradient(135deg, #1a1a1a 0%, #2d51a3 100%) !important;
}

body.dark-mode #focusContainer {
    background-color: #2d2d2d;
    box-shadow: 0 4px 8px 0 rgba(255,255,255,0.1);
}

body.dark-mode h1,
body.dark-mode #focusText {
    color: #ffffff;
}

body.dark-mode #newFocusInput {
    background-color: #3d3d3d;
    color: #ffffff;
    border-color: #4d4d4d;
}

/* Modern styling for the focus container */
#focusContainer {
    background: rgba(255, 255, 255, 0.9);
    backdrop-filter: blur(10px);
    border-radius: 16px;
    box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
    border: 1px solid rgba(255, 255, 255, 0.18);
    width: 40%;
    min-width: 300px;
    padding: 30px;
    margin: 20px;
    display: flex;
    flex-direction: column;
    align-items: center;
    transform: rotate(-2deg);
    transition: transform 0.3s ease;
}

#focusContainer:hover {
    transform: rotate(0deg);
}

/* Enhancements for the heading */
h1 {
    color: #FF69B4;
    font-size: 28px;
    margin-bottom: 20px;
    text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
    letter-spacing: 1px;
}

/* Style adjustments for the focus text */
#focusText {
    color: #6B4984;
    font-size: 1.4em;
    margin: 0;
    display: flex;
    align-items: center;
    font-weight: 600;
    letter-spacing: 0.5px;
}

/* Input field styling for a modern look */
#newFocusInput {
    width: 100%;
    padding: 15px;
    margin-bottom: 20px;
    border: 2px solid #FFB7B7;
    border-radius: 12px;
    box-sizing: border-box;
    font-family: 'Quicksand', sans-serif;
    font-size: 16px;
    background: rgba(255, 255, 255, 0.9);
    transition: all 0.3s ease;
}

#newFocusInput:focus {
    outline: none;
    border-color: #FF69B4;
    box-shadow: 0 0 15px rgba(255,105,180,0.3);
}

/* Stylish button with hover effect */
#setFocusButton {
    width: 100%;
    background: linear-gradient(45deg, #FF69B4, #FFB7B7);
    color: white;
    padding: 15px 25px;
    margin: 8px 0;
    border: none;
    border-radius: 12px;
    cursor: pointer;
    font-family: 'Quicksand', sans-serif;
    font-weight: 600;
    font-size: 16px;
    letter-spacing: 1px;
    transition: all 0.3s ease;
    display: none;
}

#setFocusButton:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(255,105,180,0.4);
}

/* Checkbox styling */
#focusCheckbox {
    margin-right: 10px;
    cursor: pointer;
}

/* Customize the appearance of the checkbox */
#focusCheckbox:checked + label {
    text-decoration: line-through;
    color: #aaa;
}

#focusArea {
    width: 100%;
    margin-bottom: 20px;
}


.complete-button {
    background: #eee;
    border: none;
    padding: 10px 20px;
    border-radius: 20px;
    cursor: pointer;
    margin-left: 15px;
    transition: all 0.3s ease;
}

.complete-button:hover {
    background: #FF69B4;
    color: white;
}

#activeFocusArea {
    justify-content: space-between;
    width: 100%;
}

#activeFocusArea {
    display: flex;
    align-items: center;
    gap: 10px;
}

#setFocusArea {
    text-align: center;
}


/* Media query for responsive design */
.switch {
    position: fixed;
    top: 20px;
    right: 20px;
    width: 60px;
    height: 34px;
}

.switch input {
    opacity: 0;
    width: 0;
    height: 0;
}

.slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #ccc;
    transition: .4s;
}

.slider:before {
    position: absolute;
    content: "";
    height: 26px;
    width: 26px;
    left: 4px;
    bottom: 4px;
    background-color: white;
    transition: .4s;
}

input:checked + .slider {
    background-color: #4CAF50;
}

input:checked + .slider:before {
    transform: translateX(26px);
}

.slider.round {
    border-radius: 34px;
}

.slider.round:before {
    border-radius: 50%;
}

/* GitHub text styling */
.github-text {
    position: fixed;
    bottom: 20px;
    right: 20px;
    color: #FF69B4;
    text-decoration: none;
    font-weight: bold;
    font-size: 1.2em;
    text-shadow: 2px 2px 4px rgba(255,105,180,0.3);
    transition: all 0.3s ease;
}

.github-text:hover {
    color: #FFB7B7;
    transform: scale(1.1);
    text-shadow: 0 0 10px rgba(255,105,180,0.5);
}

.anime-text {
    font-size: 1.4em;
    color: #FF69B4;
    text-shadow: 2px 2px 4px rgba(255,105,180,0.3);
    font-weight: bold;
    letter-spacing: 1px;
    animation: float 3s ease-in-out infinite;
}

/* Fireworks animation -  Needs significant expansion for DBZ style */
.pyro {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 999;
    pointer-events: none;
}

.pyro > .before, .pyro > .after {
    position: absolute;
    width: 5px;
    height: 5px;
    border-radius: 50%;
    box-shadow: 0 0 #fff;
    animation: 1s bang ease-out infinite backwards, 1s gravity ease-in infinite backwards, 5s position linear infinite backwards;
}


/* Anime-inspired button effects */
.complete-button {
    background: linear-gradient(45deg, #ff6b6b, #ff8e8e);
    color: white;
    text-shadow: 1px 1px 2px rgba(0,0,0,0.2);
    transform-style: preserve-3d;
    transition: transform 0.2s, box-shadow 0.2s;
}

.complete-button:hover {
    transform: translateY(-3px) scale(1.05);
    box-shadow: 0 5px 15px rgba(255,107,107,0.4);
}

.complete-button:active {
    transform: translateY(0) scale(0.98);
}

.pyro > .after {
    animation-delay: 1.25s, 1.25s, 1.25s;
    animation-duration: 1.25s, 1.25s, 6.25s;
}

@keyframes bang {
    to {
        box-shadow: -70px -115.67px #00ff73, -28px -99.67px #ff00c8;
    }
}

@keyframes gravity {
    to {
        transform: translateY(200px);
        opacity: 0;
    }
}

@keyframes position {
  0%, 19.9% { margin-top: 10%; margin-left: 40%; }
  20%, 39.9% { margin-top: 40%; margin-left: 30%; }
  40%, 59.9% { margin-top: 20%; margin-left: 70%; }
  60%, 79.9% { margin-top: 30%; margin-left: 20%; }
  80%, 99.9% { margin-top: 30%; margin-left: 80%; }
}

@media screen and (max-width: 600px) {
    #focusContainer {
        width: 80%;
        margin: 10px;
        padding: 10px;
    }

    #focusText {
        flex-direction: column;
    }
}

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const focusInput = document.getElementById('newFocusInput');
    const setFocusButton = document.getElementById('setFocusButton');
    const focusText = document.getElementById('focusText');
    const focusCheckbox = document.getElementById('focusCheckbox');
    const activeFocusArea = document.getElementById('activeFocusArea');
    const setFocusArea = document.getElementById('setFocusArea');


    let currentFocus = localStorage.getItem('currentFocus');

    if (currentFocus) {
      focusText.textContent = currentFocus;
      activeFocusArea.style.display = 'block';
      setFocusArea.style.display = 'none';
    } else {
      setFocusButton.style.display = 'block';
      activeFocusArea.style.display = 'none';
      setFocusArea.style.display = 'block';
    }

    setFocusButton.addEventListener('click', function() {
      currentFocus = focusInput.value;
      localStorage.setItem('currentFocus', currentFocus);
      focusText.textContent = currentFocus;
      activeFocusArea.style.display = 'block';
      setFocusArea.style.display = 'none';
      setFocusButton.style.display = 'none';
    });


    focusCheckbox.addEventListener('change', function() {
      // Add your completed focus handling logic here.
    });
  });
</script>